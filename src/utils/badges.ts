import { permutate, prefixItems } from "./arrays";
import type { Slug, BadgeDescriptor, Category, Format, Size } from "./types";

export const heights: Record<Size, number> = {
	"cozy": 64,
	"cozy-minimal": 64,
	"compact": 46,
	"compact-minimal": 46,
}

const availableAssets = [
	'alternativeto',
	'app-store',
	'arch-user-repository',
	'bitbucket', 
	'builtbybit',
	'chrome-web-store',
	'codeberg', 
	'codemc', 
	'codesandbox',
	'compiler-explorer',
	'crates-io',
	'curseforge',
	'deno-land-x', 
	'digitalocean',
	'digitalocean-marketplace',
	'discord-bot',
	'docker-hub',
	'epic-games', 
	'f-droid',
	'firefox-addons',
	'flathub',
	'git', 
	'gitea', 
	'github', 
	'github-container-registry',
	'github-marketplace',
	'gitlab',
	'glitch',
	'google-play', 
	'gradle-plugin-portal', 
	'hangar',
	'homebrew',
	'itch-io',
	'jitpack', 
	'jwpepper', 
	'mac-app-store', 
	'maven-central', 
	'modrinth', 
	'modweaver', 
	'musescore', 
	'nexusmods', 
	'npm', 
	'nuget',
	'polymart', 
	'pypi',
	'railway',
	'replit',
	'rubygems',
	'soundcloud',
	'sourceforge',
	'spotify',
	'stackblitz', 
	'steam',
	'visual-studio-marketplace',
] as const;

const builtWithAssets = [
	'additive',
	'adrenaline',
	'advent-of-code',
	'angular',
	'appveyor',
	'assemblyscript',
	'astro',
	'autohotkey',
	'azure-devops',
	'bepinhacks',
	'bitbucket-pipelines',
	'blazor',
	'blender',
	'chatgpt',
	'c',
	'chakra-ui',
	'chartjs',
	'circleci',
	'cloudflare-pages',
	'cloudflare-workers',
	'cmake',
	'cpp',
	'csharp',
	'd3',
	'dart',
	'discord-js',
	'docker',
	'docusaurus',
	'elixir',
	'elm',
	'esbuild',
	'fabulously-optimized',
	'flask',
	'gatsby',
	'github-pages',
	'github-workflows',
	'go',
	'godot',
	'gradle',
	'haskell',
	'haxe',
	'hydrogen',
	'java',
	'java-8',
	'java-11',
	'java-17',
	'javascript',
	'jekyll',
	'jenkins',
	'jetbrains-space',
	'kotlin',
	'kubernetes',
	'laravel',
	'lua',
	'markdown',
	'mkdocs',
	'nativescript',
	'netlify',
	'next',
	'nextjs',
	'nuxt',
	'nuxtjs',
	'php',
	'python',
	'qwik',
	'railway',
	'react',
	'remix',
	'ruby',
	'ruby-on-rails',
	'rust',
	'sass',
	'scala',
	'simply-optimized',
	'solid',
	'svelte',
	'sveltekit',
	'swift',
	'symfony',
	'tailwindcss',
	'tauri',
	'typescript',
	'unity',
	'unreal-engine',
	'vercel',
	'vite',
	'vue',
	'vuejs',
	'webassembly',
	'wordpress'
] as const;

const documentationAssets = [
	'docs-rs',
	'installation',
	'generic',
	'github-pages-docs',
	'gitbook',
	'modrinth-gallery',
	'read-the-docs',
	'setup',
	'website'
] as const;

const donateAssets = [
	'buy-me-a-coffee',
	'buy-us-a-coffee',
	'generic-plural',
	'generic-singular',
	'github-sponsors-plural',
	'github-sponsors-singular',
	'kofi-plural',
	'kofi-singular',
	'kofi-plural-alt',
	'kofi-singular-alt',
	'open-collective-plural',
	'open-collective-singular',
	'patreon-plural',
	'patreon-singular',
	'paypal-plural',
	'paypal-singular'
] as const;

const requiresAssets = [
	'architectury-api',
	'create',
	'create-fabric',
	'custom-entity-models',
	'custom-item-textures',
	'cloth-config-api',
	'connected-textures',
	'fabric-api',
	'geckolib',
	'iris-shaders',
	'optifine',
	'origins',
	'origins-classes',
	'protocollib',
	'quilted-fabric-api',
	'quilt-standard-libraries',
	'sodium',
	'tablesaw',
	'vault'
] as const;

const socialAssets = [
	'bitbucket-plural',
	'bitbucket-singular',
	'codeberg-plural',
	'codeberg-singular',
	'dev-to-plural',
	'dev-to-singular',
	'discord-plural',
	'discord-singular',
	'discourse-plural',
	'discourse-singular',
	'disqus-plural',
	'disqus-singular',
	'giscus-plural',
	'giscus-singular',
	'github-enhancements',
	'github-issues',
	'github-plural',
	'github-singular',
	'gitlab-plural',
	'gitlab-singular',
	'guilded-plural',
	'guilded-singular',
	'hackerone',
	'instagram-plural',
	'instagram-singular',
	'jira-enhancements',
	'jira-issues',
	'mastodon-plural',
	'mastodon-singular',
	'matrix-plural',
	'matrix-singular',
	'revolt-plural',
	'revolt-singular',
	'slack-plural',
	'slack-singular',
	'threads-plural',
	'threads-singular',
	'trello',
	'twitch-plural',
	'twitch-singular',
	'twitter-plural',
	'twitter-singular',
	'x-plural',
	'x-singular',
	'youtube-plural',
	'youtube-singular'
] as const;

const supportedAssets = [
	'alpine',
	'android',
	'arch',
	'bun',
	'bukkit',
	'bungeecord',
	'debian',
	'deno',
	'docker',
	'editorconfig',
	'fabric',
	'fedora',
	'folia',
	'forge',
	'github-codespaces',
	'gitpod',
	'ios',
	'liteloader',
	'macos',
	'mod-menu',
	'node-js',
	'opensuse',
	'paper',
	'pc',
	'ps3',
	'ps4',
	'ps5',
	'purpur',
	'quilt',
	'red-hat-enterprise-linux',
	'rift',
	'risugamis-modloader',
	'spigot',
	'sponge',
	'switch',
	'tablesaw',
	'ubuntu',
	'velocity',
	'waterfall',
	'windows',
	'xbox-360',
	'xbox-one',
	'xbox-series'
] as const;

const translateAssets = [
	'crowdin',
	'generic-plural',
	'generic-singular',
	'weblate'
] as const;

const unsupportedAssets = [
	'bun',
	'bukkit',
	'bungeecord',
	'deno',
	'fabric',
	'folia',
	'forge',
	'liteloader',
	'node-js',
	'paper',
	'purpur',
	'quilt',
	'rift',
	'risugamis-modloader',
	'sodium',
	'spigot',
	'sponge',
	'velocity',
	'waterfall'
] as const;

export const assets = [
	...prefixItems(availableAssets, 'available/'), 
	...prefixItems(builtWithAssets, 'built-with/'), 
	...prefixItems(documentationAssets, 'documentation/'), 
	...prefixItems(donateAssets, 'donate/'), 
	...prefixItems(requiresAssets, 'requires/'), 
	...prefixItems(socialAssets, 'social/'), 
	...prefixItems(supportedAssets, 'supported/'), 
	...prefixItems(translateAssets, 'translate/'), 
	...prefixItems(unsupportedAssets, 'unsupported/')
] as const;

export const format = ['svg', 'png', 'jpeg', 'jpg' , 'webp', 'avif'] as const;
export const size = ['cozy', 'compact', 'cozy-minimal', 'compact-minimal'] as const;

const permutations = permutate([assets, size, format]);

export const badges = permutations
	.map((permutation) => {
		const [category, slug] = permutation[0].split('/')
		return {
			category: category as Category,
			slug: slug as Slug,
			size: permutation[1] as Size,
			format: permutation[2] as Format,
		}
	}).map((path) => { // Filter out duplicates for the minimal ones
		if(path.size.endsWith("minimal") && path.slug.includes("plural")) return null;
		
		return path;
	}).filter((path) => {
		if(path === null) return false;

		return true;
	}) as BadgeDescriptor[];
