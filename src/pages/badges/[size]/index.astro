---
import PageLayout from "../../../layouts/Base.astro";
import Badge from "../../../components/Badge.astro";
import { groupBy } from "../../../utils/arrays";
import { Prism } from '@astrojs/prism';
import { size as sizes, badges, heights } from "../../../utils/badges";
import { categories } from "../../../utils/categories";
import type { BadgeDescriptor, Category } from "../../../utils/types";
import { capitalizeEachWord } from "../../../utils/strings";

export const prerender = true;
export function getStaticPaths() {
	const paths = sizes.map(size => {
		return {
			params: {
				size
			}
		}
	})

	return paths;
}

const { size } = Astro.params;

const filteredBadges = groupBy<BadgeDescriptor[], Category>(groupBy(badges, badge => badge.size).get(size)?.filter(badge => badge.format === "svg") as BadgeDescriptor[], badge => badge.category);
---

<PageLayout meta={{ title: `${capitalizeEachWord(size)} Badges` }}>
	<section>
		<div class="flex items-center">
			<h2 class="text-zinc-800 dark:text-zinc-100 mt-4 mb-3 text-3xl font-bold">Usage</h2>
			<div class="h-[1px] grow bg-black/10 dark:bg-white/40 mt-3 mx-4" />
		</div>
		<p class="mb-4 text-lg">
			The badges come in both a multitude of formats. The <code class="inline">.svg</code> format is preferred in all situations apart from where it is unsupported by the host platform.
			
			<br/>
			<br/>

			By default these badges are <code class="inline">{heights[size]}px</code> tall.

			<br/>
			<br/>
			
			You can obtain the URL for any badge by clicking on the button beneath its name.
			<Prism lang="html" code={'<!-- HTML -->\n<img alt="badge name" src="https://badges.penpow.dev/badges/[category]/[badge]/[size].{png,svg}">'} />
			<Prism lang="md" code={'<!-- Markdown -->\n![badge name]("https://badges.penpow.dev/badges/[category]/[badge]/[size].{png,svg}")'} />
		</p>
	</section>
	<section>
		<div class="flex items-center">
			<h2 class="text-zinc-800 dark:text-zinc-100 mt-4 mb-3 text-3xl font-bold">Table of Contents</h2>
			<div class="h-[1px] grow bg-black/10 dark:bg-white/40 mt-3 mx-4" />
		</div>
		<p class="mb-4 text-lg">
			{Object.keys(categories).map((key) => (
					<li class="ml-12 text-lg my-1/2">
						<button data-ref={key} class="text-blue-500 hover:text-blue-600 underline underline-offset-2">{capitalizeEachWord(key)}</button>
					</li>
			))}
		</p>
	</section>
	<section class="mt-6">
		{[...filteredBadges.keys()].map((key) => (
			<div class="flex items-center">
				<h2 id={key} class="text-zinc-800 dark:text-zinc-100 mt-4 mb-3 text-3xl font-bold">{capitalizeEachWord(key)}</h2>
				<div class="h-[1px] grow bg-black/10 dark:bg-white/40 mt-3 mx-4" />
			</div>
			<p class="mb-3 text-xl">{categories[key]}</p>
			<div class="grid grid-cols-2 gap-2">
				{filteredBadges.get(key)!.map((badge) => (
					<Badge slug={badge.slug} category={badge.category} size={size} />
				))}
			</div>
			<button data-ref="top" class="text-blue-500 hover:text-blue-600 underline underline-offset-2 text-2xl">⬆️ Back to Top</button>
		))}
	</section>
</PageLayout>

<script transition:persist>
	buttons = document.querySelectorAll("button");

	for(const button of buttons) {
		button.addEventListener("click", (event) => {
			const clicked = event.target;

			const ref = clicked.dataset.ref;
			if(ref === "top") return window.scrollTo(0, 0);

			const target = document.querySelector(`#${ref}`);
			if(target) target.scrollIntoView({
				behavior: "smooth",
			})
		})
	}
</script>
